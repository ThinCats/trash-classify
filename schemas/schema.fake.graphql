scalar Upload
schema {
  query: Query
  mutation: Mutation
}

input TrashQueryArg {
  keyword: String!
  root: String!
}

type Query {
  trash(name: TrashQueryArg!): Trash
  trashList(trashNameList: [TrashQueryArg!]!): [Trash!]!
}

type Trash {
  type: TrashType!
  name: String! @fake(type: productName)
  id: ID! @fake(type: imageUrl)
  extraInfo: TrashExtraInfo!
}

type TrashExtraInfo {
  id: ID!
  degrateTime: Int!
}

type HTMLType {
  src: String! @examples(values: ["<br/>", "<h1></h1>"])
  js: [String!]!
  css: [String!]!
}

type TrashType {
  id: ID!
  name: String! @examples(values: ["recy", "non-recy"])
}

type ImagePosition {
  width: Float @fake(type: number, options: { minNumber: 300, maxNumber: 500 })
  height: Float @fake(type: number, options: { minNumber: 400, maxNumber: 600 })
  top: Float @fake(type: number, options: { minNumber: 0, maxNumber: 100 })
  left: Float @fake(type: number, options: { minNumber: 0, maxNumber: 100 })
}

type Mutation {
  # image is with base64 encoded
  uploadImageByURL(imgURL: String): UploadImageResponse!
  uploadImageByFile(imgFile: Upload!): UploadImageResponse!
  uploadImage(imgFile: Upload!): FileType!
}

type FileType {
  filename: String
  mimetype: String
}

type TaggedImageResult {
  keyword: String @examples(values: ["world yoga", "卡通动漫", "图画", "峡谷"])
  score: Float @fake(type: number, options: { minNumber: 1, maxNumber: 10 })
  root: String @examples(values: ["非自然图像-彩色动漫", "商品-绘画", "自然风景-峡谷", "植物-树"])
}

type UploadImageResponse {
  taggedImageResult: [TaggedImageResult!]!
  taggedImagePosition: ImagePosition!
}
